// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Presistance.Data;

#nullable disable

namespace Presistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250906094641_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entites.Hotel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Stars")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Cairo, Egypt",
                            IsDeleted = false,
                            Name = "Cairo Grand Hotel",
                            RoomsCount = 0,
                            Stars = 5m
                        },
                        new
                        {
                            ID = 2,
                            Address = "Alexandria, Egypt",
                            IsDeleted = false,
                            Name = "Alexandria Beach Resort",
                            RoomsCount = 0,
                            Stars = 4m
                        },
                        new
                        {
                            ID = 3,
                            Address = "Luxor, Egypt",
                            IsDeleted = false,
                            Name = "Luxor Nile View",
                            RoomsCount = 0,
                            Stars = 5m
                        },
                        new
                        {
                            ID = 4,
                            Address = "Giza, Egypt",
                            IsDeleted = false,
                            Name = "Giza Pyramids Inn",
                            RoomsCount = 0,
                            Stars = 3m
                        },
                        new
                        {
                            ID = 5,
                            Address = "Sharm El Sheikh, Egypt",
                            IsDeleted = false,
                            Name = "Sharm El Sheikh Paradise",
                            RoomsCount = 0,
                            Stars = 5m
                        });
                });

            modelBuilder.Entity("Domain.Entites.Identity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FristName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Entites.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entites.Reservations_Mod.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Entites.Reservations_Mod.ReservationRoom", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("ReservationRooms");
                });

            modelBuilder.Entity("Domain.Entites.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOccupancy")
                        .HasColumnType("int");

                    b.Property<int>("NumOfBed")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<double>("RoomSize")
                        .HasColumnType("float");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HotelId = 1,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 2,
                            NumOfBed = 2,
                            Price = 150m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        },
                        new
                        {
                            ID = 2,
                            HotelId = 1,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 3,
                            NumOfBed = 3,
                            Price = 100m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        },
                        new
                        {
                            ID = 3,
                            HotelId = 2,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 2,
                            NumOfBed = 2,
                            Price = 200m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        },
                        new
                        {
                            ID = 4,
                            HotelId = 2,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 4,
                            NumOfBed = 4,
                            Price = 250m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        },
                        new
                        {
                            ID = 5,
                            HotelId = 3,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 4,
                            NumOfBed = 2,
                            Price = 300m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        },
                        new
                        {
                            ID = 6,
                            HotelId = 3,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 4,
                            NumOfBed = 2,
                            Price = 120m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        },
                        new
                        {
                            ID = 7,
                            HotelId = 4,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 2,
                            NumOfBed = 2,
                            Price = 180m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        },
                        new
                        {
                            ID = 8,
                            HotelId = 5,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 2,
                            NumOfBed = 2,
                            Price = 400m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        },
                        new
                        {
                            ID = 9,
                            HotelId = 5,
                            IsAvailable = false,
                            IsDeleted = false,
                            MaxOccupancy = 2,
                            NumOfBed = 2,
                            Price = 90m,
                            RoomNumber = 0,
                            RoomSize = 0.0,
                            RoomType = 0
                        });
                });

            modelBuilder.Entity("Domain.Entites.RoomPictures", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("RoomPictures");
                });

            modelBuilder.Entity("HotelRoomPictures", b =>
                {
                    b.Property<int>("HotelPicturesID")
                        .HasColumnType("int");

                    b.Property<int>("HotelsID")
                        .HasColumnType("int");

                    b.HasKey("HotelPicturesID", "HotelsID");

                    b.HasIndex("HotelsID");

                    b.ToTable("Hotel_Pictures", (string)null);
                });

            modelBuilder.Entity("RoomRoomPictures", b =>
                {
                    b.Property<int>("RoomPicturesID")
                        .HasColumnType("int");

                    b.Property<int>("RoomsID")
                        .HasColumnType("int");

                    b.HasKey("RoomPicturesID", "RoomsID");

                    b.HasIndex("RoomsID");

                    b.ToTable("Room_Pictures", (string)null);
                });

            modelBuilder.Entity("Domain.Entites.Identity.Address", b =>
                {
                    b.HasOne("Domain.Entites.Identity.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("Domain.Entites.Identity.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Reservations_Mod.Reservation", b =>
                {
                    b.HasOne("Domain.Entites.Hotel", "Hotel")
                        .WithMany("Reservations")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Reservations_Mod.ReservationRoom", b =>
                {
                    b.HasOne("Domain.Entites.Reservations_Mod.Reservation", "Reservation")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Room", "Room")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Entites.Room", b =>
                {
                    b.HasOne("Domain.Entites.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelRoomPictures", b =>
                {
                    b.HasOne("Domain.Entites.RoomPictures", null)
                        .WithMany()
                        .HasForeignKey("HotelPicturesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomRoomPictures", b =>
                {
                    b.HasOne("Domain.Entites.RoomPictures", null)
                        .WithMany()
                        .HasForeignKey("RoomPicturesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entites.Hotel", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.Entites.Identity.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entites.Reservations_Mod.Reservation", b =>
                {
                    b.Navigation("ReservationRooms");
                });

            modelBuilder.Entity("Domain.Entites.Room", b =>
                {
                    b.Navigation("ReservationRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
